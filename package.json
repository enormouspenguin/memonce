{
    "name": "memonce",
    "version": "0.0.1",
    "description": "Create async function wrapper that ensure wrapped function is only excecuted once and memorize execution result to pass to subsequence invocation",
    "main": "index.js",
    "keywords":["memonce", "once", "memoize", "function", "wrapper", "async", "throw", "return", "cache"],
    "repository" : {
        "type" : "git",
        "url" : "https://github.com/kimkhanh/memonce.git"
    },
    "scripts": {
        "test": "tap ./test"
    },
    "dependencies": {
    },
    "devDependencies": {
        "chai":"~1.8.0",
        "tap": "~0.4.4"
    },
    "engines" : {
        "node" : "~0.10.12",
        "npm" : "~1.2.32"
    },
    "author": "KimKhanh",
    "license": "MIT"
}
